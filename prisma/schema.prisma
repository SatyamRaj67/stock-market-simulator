// This is your Prisma schema file for the Stock Market Simulator

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String
  password       String
  role           UserRole  @default(USER)
  avatarUrl      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  balance        Decimal   @default(10000.00) @db.Decimal(12, 2)
  totalProfit    Decimal   @default(0.00) @db.Decimal(12, 2)
  portfolioValue Decimal   @default(0.00) @db.Decimal(12, 2)
  isActive       Boolean   @default(true)
  lastLogin      DateTime?

  // Relations
  portfolio     Portfolio?
  transactions  Transaction[]
  ownedStocks   Stock[] // Stocks created by this user
  watchlist     Watchlist?
  notifications Notification[]

  @@index([email])
}

model Portfolio {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  positions Position[]

  @@index([userId])
}

model Position {
  id              String   @id @default(cuid())
  portfolioId     String
  stockId         String
  quantity        Int
  averageBuyPrice Decimal  @db.Decimal(12, 2)
  currentValue    Decimal  @db.Decimal(12, 2)
  profitLoss      Decimal  @db.Decimal(12, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stock     Stock     @relation(fields: [stockId], references: [id])

  @@unique([portfolioId, stockId])
  @@index([portfolioId])
  @@index([stockId])
}

model Stock {
  id                  String   @id @default(cuid())
  symbol              String   @unique
  name                String
  description         String?
  logoUrl             String?
  sector              String?
  currentPrice        Decimal  @db.Decimal(12, 2)
  openPrice           Decimal?  @db.Decimal(12, 2)
  highPrice           Decimal?  @db.Decimal(12, 2)
  lowPrice            Decimal?  @db.Decimal(12, 2)
  previousClose       Decimal?  @db.Decimal(12, 2)
  volume              Int      @default(0)
  marketCap           Decimal? @db.Decimal(16, 2)
  isActive            Boolean  @default(true)
  isFrozen            Boolean  @default(false)
  priceChangeDisabled Boolean  @default(false)
  priceCap            Decimal? @db.Decimal(12, 2)
  createdById         String // User who created this stock
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Volatility and jump settings
  volatility        Decimal @default(0.02) @db.Decimal(5, 4) // 0.0001 to 0.9999
  jumpProbability   Decimal @default(0.01) @db.Decimal(5, 4) // 0.0001 to 0.9999
  maxJumpMultiplier Decimal @default(1.10) @db.Decimal(5, 4) // e.g., 1.10 means 10% max jump

  // Relations
  createdBy      User            @relation(fields: [createdById], references: [id])
  positions      Position[]
  transactions   Transaction[]
  priceHistory   PriceHistory[]
  watchlistItems WatchlistItem[]

  @@index([symbol])
  @@index([createdById])
  @@index([isActive])
}

model PriceHistory {
  id             String   @id @default(cuid())
  stockId        String
  price          Decimal  @db.Decimal(12, 2)
  volume         Int
  timestamp      DateTime @default(now())
  wasJump        Boolean  @default(false)
  jumpPercentage Decimal? @db.Decimal(6, 2) // If it was a jump, record the percentage

  // Relations
  stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@index([stockId])
  @@index([timestamp])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  stockId     String
  type        TransactionType
  quantity    Int
  price       Decimal         @db.Decimal(12, 2)
  totalAmount Decimal         @db.Decimal(12, 2)
  timestamp   DateTime        @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])

  @@index([userId])
  @@index([stockId])
  @@index([timestamp])
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WatchlistItem[]

  @@index([userId])
}

model WatchlistItem {
  id          String   @id @default(cuid())
  watchlistId String
  stockId     String
  addedAt     DateTime @default(now())

  // Relations
  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  stock     Stock     @relation(fields: [stockId], references: [id])

  @@unique([watchlistId, stockId])
  @@index([watchlistId])
  @@index([stockId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

model SystemSetting {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  description   String?
  lastUpdatedBy String?
  updatedAt     DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TransactionType {
  BUY
  SELL
}

enum NotificationType {
  SYSTEM
  PRICE_ALERT
  TRANSACTION
  ADMIN_ACTION
}
